#include "CppUnitTest.h"

#include <ELCore/Buffer.hpp>
#include <ELCore/List.hpp>
#include <ELCore/Map.hpp>
#include <ELCore/Hashmap.hpp>
#include <ELCore/NumberedSet.hpp>
#include <ELCore/IteratorUtils.hpp>
#include <ELCore/String.hpp>
#include <ELMaths/Maths.hpp>
#include <ELMaths/Random.hpp>

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

String RandomString(Random &random)
{
	size_t length = random.Next(1, 1000);
	String string('?', length);
	
	for (size_t i = 0; i < length; ++i)
		string[i] = (char)random.Next('1', 255);

	return string;
}

namespace EngineTests
{


	TEST_CLASS(ContainerTests)
	{
	public:
		
		TEST_METHOD(TestBuffer)
		{
			{
				constexpr int sz = 1000;

				Buffer<int> buffer, buffer2;
				buffer.SetSize(sz);

				//Test assignment / addition
				for (int i = 0; i < sz; ++i)
				{
					buffer[i] = i;
					buffer2.Add(i);
				}

				Assert::IsTrue(buffer.GetSize() == sz, L"Buffer assignment error");
				Assert::IsTrue(buffer2.GetSize() == sz, L"Buffer addition error");

				int* ptr = &buffer[0], * ptr2 = &buffer2[0];
				for (int i = 0; i < sz; ++i)
				{
					Assert::IsTrue(*ptr == i && *ptr == *ptr2, L"Buffer element error");
					++ptr;
					++ptr2;
				}

				for (int i = 0; i < sz; ++i)
				{
					buffer.Remove(0);
					buffer2.Remove(IteratorUtils::IndexOf(buffer2.begin(), buffer2.end(), i));
				}

				Assert::IsTrue(buffer.GetSize() == 0, L"RemoveIndex error");
				Assert::IsTrue(buffer2.GetSize() == 0, L"Remove error");

				buffer.Emplace(2);
				buffer.Emplace(4);
				buffer.Emplace(5);
				buffer.Insert(0, 0);
				buffer.Insert(1, 1);
				buffer.Insert(3, 3);
				buffer.Insert(6, 6);

				for (int i = 0; i < buffer.GetSize(); ++i)
					Assert::IsTrue(buffer[i] == i, L"Buffer insert error");

				buffer.Insert(3, -1);
				Assert::IsTrue(buffer[3] == -1, L"Buffer insert error");

				buffer.Remove(3);

				for (int i = 0; i < buffer.GetSize(); ++i)
					Assert::IsTrue(buffer[i] == i, L"Buffer insert error");

				buffer.Clear();
				buffer.Grow(3);
				Assert::IsTrue(buffer.GetSize() == 3, L"Buffer::Grow error");
				buffer[0] = 1; buffer[1] = 2; buffer[2] = 3;
				
				buffer.Grow(2);
				Assert::IsTrue(buffer.GetSize() == 5 && buffer[0] == 1 && buffer[1] == 2 && buffer[2] == 3, L"Buffer::Grow error");
				
				buffer.Shrink(3);
				Assert::IsTrue(buffer.GetSize() == 2 && buffer[0] == 1 && buffer[1] == 2, L"Buffer::Shrink error");
				
				buffer.Shrink(1);
				Assert::IsTrue(buffer.GetSize() == 1 && buffer[0] == 1, L"Buffer::Shrink error");
				buffer.SetSize(11);
				Assert::IsTrue(buffer.GetSize() == 11 && buffer[0] == 1, L"Buffer::SetSize error");
				buffer.SetSize(6);
				Assert::IsTrue(buffer.GetSize() == 6 && buffer[0] == 1, L"Buffer::SetSize error");
			}

			{
				float floats[3] = { 1.f, 2.f, 3.f };

				Buffer<float> m10(floats, 3), m11({1.f, 2.f, 3.f});
				Buffer<float> m12(m10), m13 = m10;

				Assert::IsTrue(m10.Matches(m11) && m11.Matches(m12) && m12.Matches(m13), L"Buffer construction/assignment error");

				Buffer<float> b5;
				b5.AddMultiple(m10).AddMultiple(m11).AddMultiple(m11).AddMultiple(m13);
				Assert::IsTrue(b5.Matches(Buffer<float>({ 1,2,3,1,2,3,1,2,3,1,2,3 })), L"Buffer addition error");
			}
		}

		TEST_METHOD(TestList)
		{
			Random random(2);
			List<String> list;
			constexpr int size = 1000;
			constexpr int count = 1;

			for (int i = 0; i < count; ++i)
			{
				list.Clear();

				for (int i = 0; i < size; ++i)
				{
					list.AddBack(RandomString(random));
				}

				Assert::IsTrue(list.GetSize() == size, L"List size is incorrect");

				int itCount = 0;
				for (auto it = list.begin(); it; ++it)
					++itCount;

				Assert::IsTrue(itCount == size, L"List iterator error");

				const String eval = "Totally not a random string that could never ever be generated by RandomString()...";
				list.Add(IteratorUtils::Offset(list.begin(), list.end(), size - 1), eval);

				Assert::IsTrue(list.GetSize() == size + 1 && *(IteratorUtils::Offset(list.begin(), size - 1)) == eval, L"List insert error");

				list.AddFront(eval);
				list.AddFront(eval);
				list.AddFront(eval);
				
				Assert::IsTrue(list.GetSize() == size + 4 && *list.begin() == eval, L"List insert error");

				for (size_t listSize = list.GetSize(); listSize > 0; --listSize)
					list.Remove(IteratorUtils::Offset(list.begin(), (size_t)random.Next(0, (uint32)listSize - 1)));

				Assert::IsTrue(list.GetSize() == 0, L"List remove error");
			}
		}

		template<typename T>
		void TestMap()
		{
			T map = T();

			constexpr int size = 1000;
			const int halfSize = size / 2;

			for (int i = 0; i < halfSize; ++i)
			{
				map[i]++;
				map[size - 1 - i]++;
			}

			Assert::IsTrue(map.GetSize() == size, L"Map size is wrong");

			for (const Pair<const int, int>& kv : map)
				Assert::IsTrue(kv.second == 1, L"All incremented values are not 1");
		}

		TEST_METHOD(TestMap)
		{
			TestMap<Map<int, int>>();
		}

		TEST_METHOD(TestHashmap)
		{
			TestMap<Hashmap<int, int>>();
		}

		TEST_METHOD(TestSet)
		{
			NumberedSet<int> set(1);
			set.Add(1);
			set.Add(1);
			set.Add(1);
			set.Add(2);
			set.Add(3);

			Assert::IsTrue(set.IDOf(1) && *set.IDOf(1) == 1, L"NumberedSet ID error");
			Assert::IsTrue(set.IDOf(2) && *set.IDOf(2) == 2, L"NumberedSet ID error");
			Assert::IsTrue(set.IDOf(3) && *set.IDOf(3) == 3, L"NumberedSet ID error");
			Assert::IsTrue(*set.TryGet(1) == 1);
			Assert::IsTrue(*set.TryGet(2) == 2);
			Assert::IsTrue(*set.TryGet(3) == 3);
		}
	};
}
